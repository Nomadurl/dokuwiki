
<p>
<strong>Алгоритм назначения куратора на задание.</strong><br/>

Назначение осуществляется по cron, входной скрипт:
<code>\console\controllers\TaskToCuratorAssignmentController::actionAssign</code>. В нем вызывается функция <code>_assignCurator</code>, которая выбирает все задания на которые необходимо назначить куратора и в цикле вызывается метод <code>\common\components\taskAssignment\TaskAssignment::assignCurator</code>. В методе среди прочего выполняется выбор подходящего куратора:
</p>
<pre class="code">  $assigner = new \common\components\taskAssignment\components\Assessment($this-&gt;task); 
  $this-&gt;task-&gt;curator_id = $assigner-&gt;chooseCurator();</pre>

<p>
Метод <code>\common\components\taskAssignment\components\Assessment::chooseCurator</code> служит для определения оптимального куратора для данного задания. Данная функция возвращает куратора с наибольшим приоритетом для назначения на задание:
</p>
<pre class="code">$this-&gt;chosenCurator = array_search(max(array_values($weightArray)), $weightArray);</pre>

<p>
 Для выбора составляется массив данных $<code>weightArray</code> в котором находятся подходящие кураторы и значение веса. Массив формируется функцией <code>\common\components\taskAssignment\components\Assessment::_handleEstimationData</code>. Внутри функции создается массив <code>$weights</code>:
</p>
<pre class="code">$weights = $this-&gt;_collectEstimationData();</pre>

<p>
 который содержит сборку разнородных оценочных данных по кураторам. Чтобы получить все веса по конкретному куратору необходимо выполнить: <code>ArrayHelper::getColumn($weights, $candidateId)</code>. Далее в функции создается начальный массив кандидатов где ключами являются id кураторов, а значения - 0, начальные «веса» по критериям:
</p>
<pre class="code">$this-&gt;candidates = array_flip($this-&gt;candidates);
array_walk($this-&gt;candidates, function (&amp;$value) {
  $value = 0;
});</pre>

<p>
Изначальный массив <code>$candidates</code> формируется в конструкторе, вызовом функции <code>_chooseCandidates()</code>.
После создания всех подготовительных массивов формируется итоговый массив в формате [куртор ⇒ вес]:
</p>
<pre class="code">$resultWeights = [];
foreach ($this-&gt;candidates as $candidateId =&gt; $weight) { //суммируем веса всех кураторов и выдаем результирующий массив весов
  $resultWeights[$candidateId] = array_sum(ArrayHelper::getColumn($weights, $candidateId));
}
$this-&gt;candidates = $resultWeights;</pre>

<p>
Из функции возвращается массив кураторов с их суммарными весами:
</p>
<pre class="code">return $this-&gt;candidates;</pre>

<p>
Метод <code>_collectEstimationData()</code> возвращает массив критериев:
</p>
<pre class="code">private function _collectEstimationData()
{
  $estimation = [];
  foreach ($this-&gt;getCriterion() as $criterion) {
    /**
     * @var \common\components\taskAssignment\components\criteria\Criterion $criterionEntity ;
     */
     $criterionEntity = new $criterion($this);
     $estimation[$criterionEntity::KEY] = $criterionEntity-&gt;getEstimate();
   }
   return $estimation;
}</pre>

<p>
Массив весов (критериев) формируется каждый своим классом:
</p>
<pre class="code">public function getCriterion()
{
  return [
    \common\components\taskAssignment\components\criteria\CityStat::class,
    \common\components\taskAssignment\components\criteria\TaskNumber::class,
    \common\components\taskAssignment\components\criteria\ItCurator::class,     
    \common\components\taskAssignment\components\criteria\OrganizationCuratorsFrequencyStatistics::class,
    \common\components\taskAssignment\components\criteria\TakeDate::class,
    \common\components\taskAssignment\components\criteria\OrganizationPersonal::class,
    \common\components\taskAssignment\components\criteria\NewOrganization::class,
    \common\components\taskAssignment\components\criteria\OrganizationCleaning::class,
  ];
}</pre>

<p>
Каждый класс имеет главный метод <code>getEstimate()</code>.
</p>
